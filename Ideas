/* IDEA 1 
        // The array of lists of possible moves, in which each list is a different depth of the search depending on where it is 
        List<Move>[] moves = new List<Move>[2];
        // initializes the first list of possible moves and captures, with a search depth of 1
        moves[0] = board.GetLegalMoves().ToList();
        moves[1]= board.GetLegalMoves(true).ToList();
        PieceList[] pieces = board.GetAllPieceLists();
        int[] index = new int[5];
        for(int i = 0; i < moves[0].Count; i++) {
            board.MakeMove(moves[0][i]);
            if(board.IsInCheckmate()) {
                return moves[0][i];
            }
            board.UndoMove(moves[0][i]);
            if(board.IsWhiteToMove) {
                for(int j = 0; j < 6; j++) {
                    index[3] += pieces[j].Count;
                }
                for(int j = 6; j < 12; j++) {
                    index[4] += pieces[j].Count;
                }
                index[2] += index[3] / index[4] * 8;
            } else {
                for(int j = 0; j < 6; j++) {
                    index[4] += pieces[j].Count;
                }
                for(int j = 6; j < 12; j++) {
                    index[3] += pieces[j].Count;
                }
                index[2] += index[4] / index[3] * 8;
            }
            index[2] += (moves[1].Count * 2) + moves[0].Count;
            if(index[2] > index[1]) {
                index[0] = i;
                index[1] = index[2];
            }
        }
        if(moves[0][index[0]] != Move.NullMove) {
            return moves[0][index[0]];
        } else {
            return moves[0][0];
        }
        */


        // IDEA 2

        //Board data = Board.CreateBoardFromFEN("QQQQQQQQ/QQQQQQQQ/QQQQQQQQ/QQQQQQQQ/QQQQQQQQ/QQQQQQQQ/QQQQQQQQ/QQQQQQQQ");
        //Console.WriteLine(board.ZobristKey);
        //Console.WriteLine(board.GetFenString());
        //return board.GetLegalMoves()[0];
        