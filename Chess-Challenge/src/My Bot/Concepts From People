/*Flipping a square index idx

vertically: (idx ^ 0b111000)
horizontally: (idx ^ 0b000111)



To compress Piece-Square maps when they are symmetric you can calculate
an index and only  store half the values, simply apply one of these formulas to the square index.?

horizontally: 
  int file = square % 8;
  int ListIndex = (file > 3 ? file ^ 7 : file) + (square/8)*4;
vertically:
  int ListIndex = square ^ ((square/8) > 3 ? 0b111000 : 0);




Displaying a bitboard:

ulong bitboard;

for (int rank=7; rank>=0; rank--) {
  ulong local = (bitboard >> (8*rank));
  for (int file=0; file<8; file++) {
    Console.Write((local & 1) != 0 ? "1 " : "0 ");
    local /= 2;
  }
  Console.WriteLine("");
}
You can use Convert.ToString(...) with base 2 to display binary data. However this does not work for data that is 64-bits and unsigned. It does work for signed values up to 64 bits, so you can just convert it.
This function might not be legal based on the rules. But I don't think that printing info would be needed in a submit.


compress bytes into decimal floats:
If you have large amounts of data (more then 400 bytes), a stronger compression is worth the additional token cost of decompression.
Compress and print with:
*/

/**
* Converts a list of bytes into a list of decimal numbers.
* List length must be multiple of 12.
*/
/*
decimal[] CompressDecimal(byte[] data)
{
    var result = new decimal[data.Length / 12];
    for (int idx = 0; idx < result.Length; idx ++)
    {
        result[idx] = new Decimal(
            BitConverter.ToInt32(data, idx*12),
            BitConverter.ToInt32(data, idx*12 + 4),
            BitConverter.ToInt32(data, idx*12 + 8),
            false,
            0);
    }
    return result;
}

// prints decimal list ready to be copied
void PrintDecimalList(decimal[] data)
{
    Array.ForEach(data, x => Console.WriteLine("" + x + "m,"));
}



and decompress like this:

static decimal[] Compressed = { paste list here };
byte[] Decompressed = Compressed.SelectMany(decimal.GetBits).Where((x, i) => i % 4 != 3).SelectMany(BitConverter.GetBytes).ToArray();



token cost is 40 + list length / 12


*/


/*


To combat the token restrictions, it makes sense to use as small of a datatype as possible and then compress those into larger datatypes.
I have implemented two ways to compress byte arrays into larger data types.

--------------------------------

compress bytes into unsigned long int:
this has slightly less overhead for decompression and is therefore good for small byte array compression.

you can compress a byte array with this method:

* Converts a list of bytes into a list of unsigned long integers.
* List length must be multiple of 8.

ulong[] CompressLong(byte[] data)
{
    var result = new ulong[data.Length / 8];
    for (int idx = 0; idx < result.Length; idx++)
    {
        result[idx] = BitConverter.ToUInt64(data, idx*8);
    }
    return result;
}



And then print the list with this method:

// prints unsigned long integer list ready to be copied
void PrintLongList(ulong[] data)
{
    Array.ForEach(data, x => Console.WriteLine("" + x + ","));
}


You can then copy and paste the list into your Bot code.

decompress the data like this:

static ulong[] Compressed = { paste list here };
byte[] Decompressed = Compressed.SelectMany(BitConverter.GetBytes).ToArray();

*/



/*
Target audience: People with an existing rudimentary engine (search + eval) that performs okay but runs into issues in the endgame. 

There are three reasons that your engine might not be performing well in the endgame, two of which I'll cover here. The first reason is that it gets a winning position,
sees mate, but doesn't actually play the mating moves and instead shuffles pieces around, resulting in a possible timeout. First, eliminate bugs to ensure your engine actually 
sees the mating moves. Next, decrease the value of mate depending on the number of moves to reach it. So if mate is worth 10000, a mate that happens in three moves should be 
worth 9997, while a mate that happens in 1 should be considered 9999. This will completely fix the problem assuming no bugs

The second reason that your engine might not be performing well in the endgame is if it gets into a winning position but never sees mate at all. Instead your engine will likely
shuffle pieces around and maybe get lucky and see mate. This is the most interesting scenario, and has the most varied solutions. You want your engine to push the game into
situations where it will probably be able to see mate, without actually seeing mate. This can be done by rewarding things that will probably result in mate. The first and 
easiest example of this is rewarding pushing the enemy king to the edge or corner of the board, where it's easier to deliver checkmate. In addition another great way is to 
reward pawn pushes, since it's much easier to win with another queen on the board. A more advanced idea that might not work with the token restriction is to reward your 
pieces getting closer to the enemy king in hopes they can help deliver checkmate fast enough to be spotted.  It's also important to make sure you have robust stalemate and 
50 move rule detection to prevent drawing when you should be winning.

The third reason is simple: Your engine doesn't get into winning endgame positions. This one is the simplest, yet the hardest to actually improve. You can improve middlegame
evaluation or search to help this, which is such a broad topic it's impossible to talk about here. The answer is pretty much just "make your engine better", which is obviously 
far easier said than done

*/