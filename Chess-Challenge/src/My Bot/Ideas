/* IDEA 1 
        // The array of lists of possible moves, in which each list is a different depth of the search depending on where it is 
        List<Move>[] moves = new List<Move>[2];
        // initializes the first list of possible moves and captures, with a search depth of 1
        moves[0] = board.GetLegalMoves().ToList();
        moves[1]= board.GetLegalMoves(true).ToList();
        PieceList[] pieces = board.GetAllPieceLists();
        int[] index = new int[5];
        for(int i = 0; i < moves[0].Count; i++) {
            board.MakeMove(moves[0][i]);
            if(board.IsInCheckmate()) {
                return moves[0][i];
            }
            board.UndoMove(moves[0][i]);
            if(board.IsWhiteToMove) {
                for(int j = 0; j < 6; j++) {
                    index[3] += pieces[j].Count;
                }
                for(int j = 6; j < 12; j++) {
                    index[4] += pieces[j].Count;
                }
                index[2] += index[3] / index[4] * 8;
            } else {
                for(int j = 0; j < 6; j++) {
                    index[4] += pieces[j].Count;
                }
                for(int j = 6; j < 12; j++) {
                    index[3] += pieces[j].Count;
                }
                index[2] += index[4] / index[3] * 8;
            }
            index[2] += (moves[1].Count * 2) + moves[0].Count;
            if(index[2] > index[1]) {
                index[0] = i;
                index[1] = index[2];
            }
        }
        if(moves[0][index[0]] != Move.NullMove) {
            return moves[0][index[0]];
        } else {
            return moves[0][0];
        }
        */


        // IDEA 2

        //Board data = Board.CreateBoardFromFEN("QQQQQQQQ/QQQQQQQQ/QQQQQQQQ/QQQQQQQQ/QQQQQQQQ/QQQQQQQQ/QQQQQQQQ/QQQQQQQQ");
        //Console.WriteLine(board.ZobristKey);
        //Console.WriteLine(board.GetFenString());
        //return board.GetLegalMoves()[0];


        /*
        // Idea 3
        // randomizer if it can't decide on a move
        var rng = new Random();
        // lists of possible moves
        Move[] moves = board.GetLegalMoves();
        Move[] captures = board.GetLegalMoves(true);
        // these are used for the deeper search
        Move[] moreMoves;
        Move[] moreMoreMoves;
        //Move[] moreMoreMoreMoves;
        // a few bools for if a piece is defended or not and if a particular checkmate idea is preventable or not.
        bool attacked;
        bool preventable;
        // an index to be used for randomizer later
        int index = 0;
        // depth 1 search
        foreach(Move move in moves) {
            // it's funny
            if(move.IsEnPassant)return move;
            // detection for if a move is attacked
            attacked = board.SquareIsAttackedByOpponent(move.TargetSquare);
            // make the move
            board.MakeMove(move);
            // if mate in 1, DO IT
            if(board.IsInCheckmate()) {
                return move;
            }
            // depth 2 search
            moreMoves = board.GetLegalMoves();
            foreach(Move move1 in moreMoves) {
                // make the move
                board.MakeMove(move1);
                // if the opponent has mate in 1
                if(board.IsInCheckmate()) {
                    // PANIC
                    // goes back to searching the player's move
                    moreMoreMoves = board.GetLegalMoves();
                    board.UndoMove(move1);
                    board.UndoMove(move);
                    // try all of them until its not mate anymore
                    foreach(Move move2 in moves) {
                        board.MakeMove(move2);
                        board.MakeMove(move1);
                        if(!board.IsInCheckmate()) {
                            return move2;
                        }
                        board.UndoMove(move1);
                        board.UndoMove(move2);
                    }
                    // catch up
                    board.MakeMove(move);
                    board.MakeMove(move1);
                }
                // depth 3 search
                moreMoreMoves = board.GetLegalMoves();
                Console.WriteLine(moreMoreMoves.Length);
                foreach(Move move2 in moreMoreMoves) {
                    Console.WriteLine(move2.TargetSquare);
                    // makes the move
                    board.MakeMove(move2);
                    // if mate in 2
                    if(board.IsInCheckmate()) {
                        // check if the mate is preventable
                        board.UndoMove(move2);
                        board.UndoMove(move1);
                        preventable = false;
                        foreach(Move move3 in moreMoves) {
                            board.MakeMove(move3);
                            board.MakeMove(move2);
                            if(!board.IsInCheckmate()) {
                                preventable = true;
                            }
                            board.UndoMove(move2);
                            board.UndoMove(move3);
                        }
                        // if not then do the checkmate
                        if(!preventable) {
                            return move;
                        }
                        board.MakeMove(move1);
                        board.MakeMove(move2);
                    }
                    // undo the moves
                    board.UndoMove(move2);
                }
                board.UndoMove(move1);
            }
            // if not attacked check then go for it
            if(board.IsInCheck() && !attacked) {                
                return move;
            }
            board.UndoMove(move);     
        }
        // random capture (old code was skipping a buncha stuff)
        if(captures.Length > 0) {
            index = rng.Next(0, captures.Length-1);
            return captures[index];
        }
        // random move if its not under attack unless you are in check
        if(board.IsInCheck()) {
            return moves[0];
        } else {
        for(int i = 0; i < 1; i++) {
            index = rng.Next(0, moves.Length-1);
            if(board.SquareIsAttackedByOpponent(moves[index].TargetSquare)) {
                i--;
            }
        }
        return moves[index];
        }

        */
        
        /* idea 3a or four or something idk

         var rng = new Random();
        bool isWhite = board.IsWhiteToMove;
        bool preventable = false;
        // depth 1 search
        foreach(Move move in board.GetLegalMoves()) {
            // its funny
            if(move.IsEnPassant) return move;
            board.MakeMove(move);
            if(board.IsInCheckmate()) {
                return move;
            }
            // depth 2 search
            foreach(Move move1 in board.GetLegalMoves()) {
                board.MakeMove(move1);
                if(board.IsInCheckmate()) {
                    board.UndoMove(move1);
                    board.UndoMove(move);
                    foreach(Move move3 in board.GetLegalMoves()) {
                        board.MakeMove(move3);
                        board.MakeMove(move1);
                        if(!board.IsInCheckmate()) {
                            return move3;
                        }
                        board.UndoMove(move1);
                        board.UndoMove(move3);
                    }
                    board.MakeMove(move);
                    board.MakeMove(move1);
                } else {
                    foreach(Move move2 in board.GetLegalMoves()) {
                        //Console.WriteLine(move2.ToString());
                        board.MakeMove(move2);
                        if(board.IsInCheckmate()) {
                            preventable = false;
                            board.UndoMove(move2);
                            board.UndoMove(move1);
                            foreach(Move move4 in board.GetLegalMoves()) {
                                board.MakeMove(move4);
                                board.MakeMove(move2);
                                if(!board.IsInCheckmate()) {
                                    preventable = true;
                                }
                                board.UndoMove(move2);
                                board.UndoMove(move4);
                            }
                            board.MakeMove(move1);
                            board.MakeMove(move2);
                            if(preventable == false) {
                                return move;
                            }
                        }
                        board.UndoMove(move2);
                    }
                }
                board.UndoMove(move1);
            }
            board.UndoMove(move);
        }
        /*
        if(board.IsInCheck() || moveToDo == Move.NullMove) {
            moveToDo = board.GetLegalMoves()[rng.Next(0, board.GetLegalMoves().Length-1)];
        }

        if(board.GetLegalMoves(true).Length > 0) {
            for(int i = 0; i < board.GetLegalMoves(true).Length; i++) {
                if(!board.SquareIsAttackedByOpponent(board.GetLegalMoves(true)[i].TargetSquare)) {
                    return board.GetLegalMoves(true)[i]; 
                }
            }
        }
        // temporarily setting the move to a random one if no checkmates and such are found
        return board.GetLegalMoves()[rng.Next(0, board.GetLegalMoves().Length-1)];
    }
    /*
    int EvaluatePos(Board board) {
        int evaluation = 0;
        foreach(PieceList list in board.GetAllPieceLists()) {
            if(list.IsWhitePieceList) {
                evaluation += list.Count + pieceValues[(int)list.TypeOfPieceInList];
            } else {
                evaluation -= list.Count + pieceValues[(int)list.TypeOfPieceInList];
            }
        }
        return evaluation;
    }
    */
    /* piecesquare table creator

    sbyte[,] pawnScores = {
        {0,  0,  0,  0},
        {50, 50, 50, 50},
        {10, 10, 20, 30}, 
        {5,  5, 10, 25},
        {0,  0,  0, 20},
        {5, -5,-10,  0},
        {5, 10, 10,-20},
        {0,  0,  0,  0}
    };
    sbyte[,] knightScores = {
        {-50,-40,-30,-30},
        {-40,-20,  0,  0}, 
        {-30,  0, 10, 15}, 
        {-30,  5, 15, 20}, 
        {-30,  0, 15, 20}, 
        {-30,  5, 10, 15}, 
        {-40,-20,  0,  5},
        {-50,-40,-30,-30}
    };
    sbyte[,] bishopScores = {
        {-20,-10,-10,-10},
        {-10,  0,  0,  0}, 
        {-10,  0,  5, 10},
        {-10,  5,  5, 10}, 
        {-10,  0, 10, 10},
        {-10, 10, 10, 10}, 
        {-10,  5,  0,  0}, 
        {-20,-10,-10,-10}
    };
    sbyte[,] rookScores = {
        {0,  0,  0,  0}, 
        {5, 10, 10, 10}, 
        {-5,  0,  0,  0},
        {-5,  0,  0,  0},
        {-5,  0,  0,  0},
        {-5,  0,  0,  0}, 
        {-5,  0,  0,  0},
        {0,  0,  0,  5},
    };
    sbyte[,] queenScores = {
        {-20,-10,-10, -5}, 
        {-10,  0,  0,  0}, 
        {-10,  0,  5,  5}, 
        {-5,  0,  5,  5}, 
        {0,  0,  5,  5}, 
        {-10,  5,  5,  5},
        {-10,  0,  5,  0},  
        {-20,-10,-10, -5}
    };
    sbyte[,] kingScores = {
        {-30,-40,-40,-50},
        {-30,-40,-40,-50},
        {-30,-40,-40,-50},
        {-30,-40,-40,-50},
        {-20,-30,-30,-40},
        {-10,-20,-20,-20},
        {20, 20,  0,  0},  
        {20, 30, 10,  0}
    };
    sbyte[,] kingEndScores = {
        {-50,-40,-30,-20},
        {-30,-20,-10,  0}, 
        {-30,-10, 20, 30},
        {-30,-10, 30, 40},
        {-30,-10, 30, 40},
        {-30,-10, 20, 30},
        {-30,-30,  0,  0},
        {-50,-30,-30,-30}
    };
    //Use to print the packed array to the console, then clean up and paste directly into your code.
    private void PackScoreData()
    {
        //Add boards from "index" 0 upwards. Here, the pawn board is "index" 0.
        //That means it will occupy the least significant byte in the packed data.
        List<sbyte[,]> allScores = new();
        allScores.Add(pawnScores);
        allScores.Add(knightScores);
        allScores.Add(bishopScores);
        allScores.Add(rookScores);
        allScores.Add(queenScores);
        allScores.Add(kingScores);
        allScores.Add(kingEndScores);

        ulong[,] packedData = new ulong[8,4];
        for(int rank = 0; rank < 8; rank++)
        {
            for(int file = 0; file < 4; file++)
            {
                for(int set = 0; set < 7; set++)
                {
                    //This is slightly inefficient but you only need to run this code once so it's fine
                    sbyte[,] thisSet = allScores[set];
                    //You could argue this should be |= but either operator works since no two digits overlap.
                    packedData[rank,file] += ((ulong)thisSet[rank,file]) << (8 * set);
                }
            }
            Console.WriteLine("{{0x{0,16:X}, 0x{1,16:X}, 0x{2,16:X}, 0x{3,16:X}}},", packedData[rank,0], packedData[rank,1], packedData[rank,2], packedData[rank,3]);
        }
    }
    */

    /* pesto squares and such

    
            int[,] mg_pawn_table = {
        {0,   0,   0,   0,   0,   0,  0,   0},
        {98, 134,  61,  95,  68, 126, 34, -11},
        {-6,   7,  26,  31,  65,  56, 25, -20},
        {-14,  13,   6,  21,  23,  12, 17, -23},
        {-27,  -2,  -5,  12,  17,   6, 10, -25},
        {-26,  -4,  -4, -10,   3,   3, 33, -12},
        {-35,  -1, -20, -23, -15,  24, 38, -22},
        {0,   0,   0,   0,   0,   0,  0,   0}
    };

    int[,] eg_pawn_table = {
        {0,   0,   0,   0,   0,   0,   0,   0},
        {178, 173, 158, 134, 147, 132, 165, 187},
        {94, 100,  85,  67,  56,  53,  82,  84},
        {32,  24,  13,   5,  -2,   4,  17,  17},
        {13,   9,  -3,  -7,  -7,  -8,   3,  -1},
        {4,   7,  -6,   1,   0,  -5,  -1,  -8},
        {13,   8,   8,  10,  13,   0,   2,  -7},
        {0,   0,   0,   0,   0,   0,   0,   0}
    };

    int[,] mg_knight_table = {
        {-167, -89, -34, -49,  61, -97, -15, -107},
        {-73, -41,  72,  36,  23,  62,   7,  -17},
        {-47,  60,  37,  65,  84, 129,  73,   44},
        {-9,  17,  19,  53,  37,  69,  18,   22},
        {-13,   4,  16,  13,  28,  19,  21,   -8},
        {-23,  -9,  12,  10,  19,  17,  25,  -16},
        {-29, -53, -12,  -3,  -1,  18, -14,  -19},
        {-105, -21, -58, -33, -17, -28, -19,  -23}
    };

    int[,] eg_knight_table = {
        {-58, -38, -13, -28, -31, -27, -63, -99},
        {-25,  -8, -25,  -2,  -9, -25, -24, -52},
        {-24, -20,  10,   9,  -1,  -9, -19, -41},
        {-17,   3,  22,  22,  22,  11,   8, -18},
        {-18,  -6,  16,  25,  16,  17,   4, -18},
        {-23,  -3,  -1,  15,  10,  -3, -20, -22},
        {-42, -20, -10,  -5,  -2, -20, -23, -44},
        {-29, -51, -23, -15, -22, -18, -50, -64}
    };

    int[,] mg_bishop_table = {
        {-29,   4, -82, -37, -25, -42,   7,  -8},
        {-26,  16, -18, -13,  30,  59,  18, -47},
        {-16,  37,  43,  40,  35,  50,  37,  -2},
        {-4,   5,  19,  50,  37,  37,   7,  -2},
        {-6,  13,  13,  26,  34,  12,  10,   4},
        {0,  15,  15,  15,  14,  27,  18,  10},
        {4,  15,  16,   0,   7,  21,  33,   1},
        {-33,  -3, -14, -21, -13, -12, -39, -21}
    };

    int[,] eg_bishop_table = {
        {-14, -21, -11,  -8, -7,  -9, -17, -24},
        {-8,  -4,   7, -12, -3, -13,  -4, -14},
        {2,  -8,   0,  -1, -2,   6,   0,   4},
        {-3,   9,  12,   9, 14,  10,   3,   2},
        {-6,   3,  13,  19,  7,  10,  -3,  -9},
        {-12,  -3,   8,  10, 13,   3,  -7, -15},
        {-14, -18,  -7,  -1,  4,  -9, -15, -27},
        {-23,  -9, -23,  -5, -9, -16,  -5, -17}
    };

    int[,] mg_rook_table = {
        {32,  42,  32,  51, 63,  9,  31,  43},
        {27,  32,  58,  62, 80, 67,  26,  44},
        {-5,  19,  26,  36, 17, 45,  61,  16},
        {-24, -11,   7,  26, 24, 35,  -8, -20},
        {-36, -26, -12,  -1,  9, -7,   6, -23},
        {-45, -25, -16, -17,  3,  0,  -5, -33},
        {-44, -16, -20,  -9, -1, 11,  -6, -71},
        {-19, -13,   1,  17, 16,  7, -37, -26}
    };

    int[,] eg_rook_table = {
        {13, 10, 18, 15, 12,  12,   8,   5},
        {11, 13, 13, 11, -3,   3,   8,   3},
        {7,  7,  7,  5,  4,  -3,  -5,  -3},
        {4,  3, 13,  1,  2,   1,  -1,   2},
        {3,  5,  8,  4, -5,  -6,  -8, -11},
        {-4,  0, -5, -1, -7, -12,  -8, -16},
        {-6, -6,  0,  2, -9,  -9, -11,  -3},
        {-9,  2,  3, -1, -5, -13,   4, -20}
    };

    int[,] mg_queen_table = {
        {-28,   0,  29,  12,  59,  44,  43,  45},
        {-24, -39,  -5,   1, -16,  57,  28,  54},
        {-13, -17,   7,   8,  29,  56,  47,  57},
        {-27, -27, -16, -16,  -1,  17,  -2,   1},
        {-9, -26,  -9, -10,  -2,  -4,   3,  -3},
        {-14,   2, -11,  -2,  -5,   2,  14,   5},
        {-35,  -8,  11,   2,   8,  15,  -3,   1},
        {-1, -18,  -9,  10, -15, -25, -31, -50}
    };

    int[,] eg_queen_table = {
        {-9,  22,  22,  27,  27,  19,  10,  20},
        {-17,  20,  32,  41,  58,  25,  30,   0},
        {-20,   6,   9,  49,  47,  35,  19,   9},
        {3,  22,  24,  45,  57,  40,  57,  36},
        {-18,  28,  19,  47,  31,  34,  39,  23},
        {-16, -27,  15,   6,   9,  17,  10,   5},
        {-22, -23, -30, -16, -16, -23, -36, -32},
        {-33, -28, -22, -43,  -5, -32, -20, -41}
    };

    int[,] mg_king_table = {
        {-65,  23,  16, -15, -56, -34,   2,  13},
        {29,  -1, -20,  -7,  -8,  -4, -38, -29},
        {-9,  24,   2, -16, -20,   6,  22, -22},
        {-17, -20, -12, -27, -30, -25, -14, -36},
        {-49,  -1, -27, -39, -46, -44, -33, -51},
        {-14, -14, -22, -46, -44, -30, -15, -27},
        {1,   7,  -8, -64, -43, -16,   9,   8},
        {-15,  36,  12, -54,   8, -28,  24,  14}
    };

    int[,] eg_king_table = {
        {-74, -35, -18, -18, -11,  15,   4, -17},
        {-12,  17,  14,  17,  17,  38,  23,  11},
        {10,  17,  23,  15,  20,  45,  44,  13},
        {-8,  22,  24,  27,  26,  33,  26,   3},
        {-18,  -4,  21,  24,  27,  23,   9, -11},
        {-19,  -3,  11,  21,  23,  16,   7,  -9},
        {-27, -11,   4,  13,  14,   4,  -5, -17},
        {-53, -34, -21, -11, -28, -14, -24, -43}
    };
    private void PackScoreData()
{
    //Add boards from "index" 0 upwards. Here, the pawn board is "index" 0.
    //That means it will occupy the least significant byte in the packed data.
    List<int[,]> allScores = new();
    allScores.Add(mg_pawn_table);
    allScores.Add(mg_knight_table);
    allScores.Add(mg_bishop_table);
    allScores.Add(mg_rook_table);
    allScores.Add(mg_queen_table);
    allScores.Add(mg_king_table);

    ulong[,] packedData = new ulong[8,8];
    for(int rank = 0; rank < 8; rank++)
    {
        for(int file = 0; file < 8; file++)
        {
            for(int set = 0; set < 6; set++)
            {
                //This is slightly inefficient but you only need to run this code once so it's fine
                int[,] thisSet = (int[,])allScores[set];
                //You could argue this should be |= but either operator works since no two digits overlap.
                packedData[rank,file] += ((ulong)thisSet[rank,file]) << (8 * set);
            }
        }
        Console.WriteLine("{{0x{0,16:X}, 0x{1,16:X}, 0x{2,16:X}, 0x{3,16:X}, 0x{4,16:X}, 0x{5,16:X}, 0x{6,16:X}, 0x{7,16:X}}},", packedData[rank,0], packedData[rank,1], packedData[rank,2], packedData[rank,3],  packedData[rank,4],  packedData[rank,5], packedData[rank,6], packedData[rank,7]);
    }
    List<int[,]> alsScores = new();
    alsScores.Add(eg_pawn_table);
    alsScores.Add(eg_knight_table);
    alsScores.Add(eg_bishop_table);
    alsScores.Add(eg_rook_table);
    alsScores.Add(eg_queen_table);
    alsScores.Add(eg_king_table);


    ulong[,] packedsData = new ulong[8,8];
    for(int rank = 0; rank < 8; rank++)
    {
        for(int file = 0; file < 8; file++)
        {
            for(int set = 0; set < 6; set++)
            {
                //This is slightly inefficient but you only need to run this code once so it's fine
                int[,] thisSet = (int[,])allScores[set];
                //You could argue this should be |= but either operator works since no two digits overlap.
                packedsData[rank,file] += ((ulong)thisSet[rank,file]) << (8 * set);
            }
        }
        Console.WriteLine("{{0x{0,16:X}, 0x{1,16:X}, 0x{2,16:X}, 0x{3,16:X}, 0x{4,16:X}, 0x{5,16:X}, 0x{6,16:X}, 0x{7,16:X}}},", packedsData[rank,0], packedsData[rank,1], packedsData[rank,2], packedsData[rank,3], packedsData[rank,4], packedsData[rank,5], packedsData[rank,6], packedsData[rank,7]);
    }
}
*/
/* Decoder for the moves

    private int GetPieceBonusScore(PieceType type, bool isWhite, int file, int rank, Board board) {
        type = (PieceType)(int)type-1;
        if(!isWhite) rank = 7 - rank;
        int unpackedData = 0;
        ulong bytemask = 0xFF;
        if(BitOperations.PopCount(board.AllPiecesBitboard) < 10) {
            unpackedData = (int)(eg_psqts[rank,file] & (bytemask << (int)type)) >> (int)type;
        } else {
            unpackedData = (int)(mg_psqts[rank,file] & (bytemask << (int)type)) >> (int)type;
        }
        if(!isWhite) unpackedData *= -1;
        return unpackedData;
    }

    */

    /* Failed PeSTO piece tables
    readonly ulong[,] mg_psqts = {
        {0xFFFFBEE41FE25900, 0x000017002A03A700, 0x0000101D1FADDE00, 0xFFFFF10C32DACF00, 0xFFFFC83B3EE73D00, 0xFFFFDE2C08D59F00, 0x0000022B1F06F100, 0x00000D2D2AF79500},
        {0x00001CE81AE5B762, 0xFFFFFED9200FD786, 0xFFFFEBFB39EE483D, 0xFFFFF9013DF3245F, 0xFFFFF7F0501E1744, 0xFFFFFC39433B3E7E, 0xFFFFDA1C1A120722, 0xFFFFE3362BD0EEF5},
        {0xFFFFF6F2FAEFD0FA, 0x000017EF13253C07, 0x000002071A2B251A, 0xFFFFF0082428411F, 0xFFFFEC1D11235441, 0x000006382D328138, 0x0000162F3D254919, 0xFFFFEA390FFE2BEC},
        {0xFFFFEEE4E7FBF6F2, 0xFFFFEBE4F505110D, 0xFFFFF3F007131306, 0xFFFFE4F01A323515, 0xFFFFE1FF18252517, 0xFFFFE7112325450C, 0xFFFFF1FDF8071211, 0xFFFFDC00EBFE15E9},
        {0xFFFFCEF6DBF9F2E5, 0xFFFFFEE5E60D03FE, 0xFFFFE4F6F40D0FFB, 0xFFFFD8F5FF1A0D0C, 0xFFFFD1FE09221C11, 0xFFFFD3FBF90C1306, 0xFFFFDF03060A150A, 0xFFFFCCFCE903F7E7},
        {0xFFFFF1F1D2FFE8E6, 0xFFFFF201E70EF6FC, 0xFFFFE9F4F00F0BFC, 0xFFFFD1FDEF0F09F6, 0xFFFFD3FB030E1303, 0xFFFFE202001B1103, 0xFFFFF10DFB121921, 0xFFFFE504DF09EFF4},
        {0x000000DCD403E2DD, 0x000006F7F00ECAFF, 0xFFFFF80AEC0FF3EC, 0xFFFFC001F6FFFCE9, 0xFFFFD507FF06FEF1, 0xFFFFF00F0B151218, 0x000008FCFA20F226, 0x00000800B900ECEA},
        {0xFFFFF0FEECDE9700, 0x000023EDF2FCEB00, 0x00000BF700F1C600, 0xFFFFCA0A10EADF00, 0x000007F10FF2EF00, 0xFFFFE3E706F3E400, 0x000017E0DAD8ED00, 0x00000DCDE5EAE900}
    };
    readonly ulong[,] eg_psqts = {
        {0xFFFFBEE41FE25900, 0x000017002A03A700, 0x0000101D1FADDE00, 0xFFFFF10C32DACF00, 0xFFFFC83B3EE73D00, 0xFFFFDE2C08D59F00, 0x0000022B1F06F100, 0x00000D2D2AF79500},
        {0x00001CE81AE5B762, 0xFFFFFED9200FD786, 0xFFFFEBFB39EE483D, 0xFFFFF9013DF3245F, 0xFFFFF7F0501E1744, 0xFFFFFC39433B3E7E, 0xFFFFDA1C1A120722, 0xFFFFE3362BD0EEF5},
        {0xFFFFF6F2FAEFD0FA, 0x000017EF13253C07, 0x000002071A2B251A, 0xFFFFF0082428411F, 0xFFFFEC1D11235441, 0x000006382D328138, 0x0000162F3D254919, 0xFFFFEA390FFE2BEC},
        {0xFFFFEEE4E7FBF6F2, 0xFFFFEBE4F505110D, 0xFFFFF3F007131306, 0xFFFFE4F01A323515, 0xFFFFE1FF18252517, 0xFFFFE7112325450C, 0xFFFFF1FDF8071211, 0xFFFFDC00EBFE15E9},
        {0xFFFFCEF6DBF9F2E5, 0xFFFFFEE5E60D03FE, 0xFFFFE4F6F40D0FFB, 0xFFFFD8F5FF1A0D0C, 0xFFFFD1FE09221C11, 0xFFFFD3FBF90C1306, 0xFFFFDF03060A150A, 0xFFFFCCFCE903F7E7},
        {0xFFFFF1F1D2FFE8E6, 0xFFFFF201E70EF6FC, 0xFFFFE9F4F00F0BFC, 0xFFFFD1FDEF0F09F6, 0xFFFFD3FB030E1303, 0xFFFFE202001B1103, 0xFFFFF10DFB121921, 0xFFFFE504DF09EFF4},
        {0x000000DCD403E2DD, 0x000006F7F00ECAFF, 0xFFFFF80AEC0FF3EC, 0xFFFFC001F6FFFCE9, 0xFFFFD507FF06FEF1, 0xFFFFF00F0B151218, 0x000008FCFA20F226, 0x00000800B900ECEA},
        {0xFFFFF0FEECDE9700, 0x000023EDF2FCEB00, 0x00000BF700F1C600, 0xFFFFCA0A10EADF00, 0x000007F10FF2EF00, 0xFFFFE3E706F3E400, 0x000017E0DAD8ED00, 0x00000DCDE5EAE900}
    };
    */